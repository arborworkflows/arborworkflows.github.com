<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Arbor</title>
    <description>Arbor workflows</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Using the Arbor webapp</title>
        <description>&lt;h2 id=&quot;how-to-run-functions-for-comparative-analyses-in-arbor&quot;&gt;How to run functions for comparative analyses in Arbor&lt;/h2&gt;

&lt;p&gt;So, you want to use the Arbor web app to do some comparative analyses?&lt;/p&gt;

&lt;p&gt;The Arbor web app is a flexible workflow engine that will let you carry out a wide range of visualizations
and analyses. You can upload data files from your computer, or use data from a range of web services.&lt;/p&gt;

&lt;p&gt;For this example, I will walk you through the steps you need to use the Arbor web app. I will set up a
basic analysis of a correlation between two continuous characters using independent contrasts.&lt;/p&gt;

&lt;h2 id=&quot;get-started&quot;&gt;Get started&lt;/h2&gt;

&lt;p&gt;You will need the anolis example data files, &lt;a href=&quot;/assets/datasets/anolis.phy&quot;&gt;anolis.phy&lt;/a&gt; and &lt;a href=&quot;/assets/datasets/anolis.csv&quot;&gt;anolis.csv&lt;/a&gt;. Save those files somewhere on your computer.&lt;/p&gt;

&lt;p&gt;Now open the &lt;a href=&quot;http://54.83.6.133:9080&quot;&gt;Arbor web app&lt;/a&gt; (this is a special instance of Arbor hosted on Amazon Web Services just for this meeting). Your screen should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/usingArborwebapp/usingArborwebapp_1.png&quot; alt=&quot;Screenshot 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You might notice some differences between this screen and the particular collections that are available to you - don’t worry too much about that.&lt;/p&gt;

&lt;p&gt;If you want, you can log in here; your user name should match the personal part of the email address you used to register for the meeting. For example, if your registration email is lukeh@uidaho.edu, then your user name is lukeh. The password will be given to you by the instructor. Note also that for this and some other examples in the workshop,  you don’t actually need to log in, you can do the analyses on the web without an account.&lt;/p&gt;

&lt;h2 id=&quot;upload-your-data&quot;&gt;Upload your data&lt;/h2&gt;

&lt;p&gt;Near the bottom of the Arbor web app screen you will see a blue box that says “Browse or drop files.” This is how you can get your data into Arbor. There are two options: either you can click the box and browse to the file you want, or you can drag the file onto the box and let go. Arbor should recognize what type of file you have added (in this case, tree or datafile) and store them in the correct way.&lt;/p&gt;

&lt;p&gt;Using this method, load in both anolis.phy and anolis.csv. If you want to make sure that your upload worked, you can use the dropdown menu that says “Save or download data.” If you have properly loaded the files you will see them appear in that list.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/usingArborwebapp/usingArborwebapp_2.png&quot; alt=&quot;Screenshot 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This is what my screen looks like after uploading anolis.csv - note that anolis.phy is also in the “Save or download data” dropdown, as I uploaded it just before.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Note: Since you have not added your files to any collections, they will appear like this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;anolis.csv&lt;/li&gt;
  &lt;li&gt;anolis.phy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You may also see the same files stored in a collection, depending on how your web app is set up. If you see versions of those stored files from the “sampleDatasets” collection, for example, they will look like this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;anolis.csv (sampleDatasets)&lt;/li&gt;
  &lt;li&gt;anolis.phy (sampleDatasets)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Those stored files will work fine for the exercise, but try to use the ones you uploaded so that you can get the hang of using your own data in Arbor. Also, since these datasets are uploaded but not saved, if you &lt;strong&gt;refresh your browser&lt;/strong&gt; or even &lt;strong&gt;accidentally go to a different page&lt;/strong&gt;, the datasets will be gone when you come back. If you want to save your uploaded data then you should login and make a personal collection.&lt;/p&gt;

&lt;h2 id=&quot;select-the-collections-you-want&quot;&gt;Select the collections you want&lt;/h2&gt;

&lt;p&gt;For this exercise, you will use functions from one arbor collections, “generalLinearModels.” This collection contains functions to test for linear relationships among a set of variables. All available collections are listed to the right side of the Data Management tab.&lt;/p&gt;

&lt;p&gt;To gain access to functions in those collections, click the little eyeball next to “generalLinearModels.” Your screen should now look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/usingArborwebapp/usingArborwebapp_3_alt.png&quot; alt=&quot;Screenshot 3&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;navigate-to-the-analysis-tab&quot;&gt;Navigate to the “analysis” tab&lt;/h2&gt;

&lt;p&gt;You are done with the Data Management tab, and will need to move to the “Analysis” tab to carry out your analysis. Click on the Analysis tab to switch. Your screen should now look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/usingArborwebapp/alt_4.png&quot; alt=&quot;Screenshot 4&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;try-out-the-piccorrelation-function&quot;&gt;Try out the picCorrelation &lt;strong&gt;function&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;We can now do some comparative analyses! Arbor has two types of analyses: functions and workflows. Later, we will build a workflow - but actually, for this problem, there is a single function that we can use to get output immediately.&lt;/p&gt;

&lt;p&gt;The function we need is called &lt;strong&gt;picCorrelation&lt;/strong&gt;, and it is part of the &lt;em&gt;phylogeny&lt;/em&gt; package.&lt;/p&gt;

&lt;p&gt;First, select this function (in the &lt;em&gt;Select analysis&lt;/em&gt; dropdown menu). You can inspect the function by clicking “Show script” (this example is in R). You should see this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/usingArborwebapp/usingArborwebapp_5.png&quot; alt=&quot;Screenshot 5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can now run the function by clicking the small blue button that says “&amp;gt; Setup and run.” This brings up a dialog box. Fill in the missing details in this box to analyze hostility (dep_variable) as a function of awesomeness (ind_variable). Choose the table and tree that you entered earlier, and set “plotPICs” to “yes.” Your form should look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/usingArborwebapp/usingArborwebapp_6.png&quot; alt=&quot;Screenshot 6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now press “&amp;gt; Run” and see what happens. If your run works, you should see a &lt;em&gt;success&lt;/em&gt; message:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/usingArborwebapp/usingArborwebapp_7.png&quot; alt=&quot;Screenshot 7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here, Arbor is telling us that the function had two outputs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;picCorrelation picPlot, which is an &lt;em&gt;image&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;picCorrelation tableResults, which is a &lt;em&gt;table&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s have a look at the outputs.&lt;/p&gt;

&lt;h2 id=&quot;visualize-the-outputs-of-the-piccorrelation-function&quot;&gt;Visualize the outputs of the picCorrelation function&lt;/h2&gt;

&lt;p&gt;To see the outputs of an Arbor function (or workflow) we can go to the &lt;strong&gt;Visualization&lt;/strong&gt; tab. Click on it now. Your screen should look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/usingArborwebapp/usingArborwebapp_8.png&quot; alt=&quot;Screenshot 8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note that the top part of the screen did not change, but the bottom tabs and buttons did. That’s ok! Keep going.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We can look at the plot first. Set the “Select visualization” dropdown to “image”, and you should see your output, called “picCorrelation picPlot”, appear under “data.” To activate this visualization click on the blue &lt;strong&gt;Update&lt;/strong&gt; button. The result should be a plot.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/usingArborwebapp/usingArborwebapp_9.png&quot; alt=&quot;Screenshot 9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(You can see more of the plot by clicking on the small downward-facing arrow above the “Log In or Register” section of the screen).&lt;/p&gt;

&lt;p&gt;Next, let’s see some numbers. Change “Select visualization” to “table”, and “data” to “picCorrelation tableResults.” Hit update again to see an ANOVA table summarizing the results of the phylogenetic regression.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/usingArborwebapp/usingArborwebapp_10.png&quot; alt=&quot;Screenshot 10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The p-value is the top number in the column denoted “Pr(&amp;gt;F).”&lt;/p&gt;

&lt;h2 id=&quot;build-a-pic-workflow&quot;&gt;Build a pic &lt;strong&gt;workflow&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Now let’s try to harness the real power of Arbor by building a simple visual workflow for our analysis. For this part to work you need to be logged in! If you are not logged in you can run existing functions and workflows but you cannot create new ones. You can create an account in Arbor quite easily.&lt;/p&gt;

&lt;p&gt;Follow the instructions on &lt;a href=&quot;/2015/06/09/creating-a-new-collection/&quot;&gt;this page&lt;/a&gt; to create an account and start a private collection. Make sure to click on the “write” tab in your new collection, then come back here and finish the tutorial!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;OK I will assume you did that. Now, go back to the “Analysis” tab. To start your workflow, type a name into the box under “Create new analysis,” then click the “+ New workflow” button. I am going to call my analysis “myPICWorkflow.”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/usingArborwebapp/usingArborwebapp_11.png&quot; alt=&quot;Screenshot 11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you have done that, your new (empty) workflow will be available under the “Select analysis” tab. To confirm that it is there (and empty!), select it, and click “Show script.” As we’ll be building this workflow, you can also click “Edit.”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/usingArborwebapp/usingArborwebapp_12.png&quot; alt=&quot;Screenshot 12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now all of that empty white space is a blank canvass for your new workflow.&lt;/p&gt;

&lt;p&gt;We will build our workflow in three steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Select the function that we need, picCorrelation&lt;/li&gt;
  &lt;li&gt;Link the function inputs that we need&lt;/li&gt;
  &lt;li&gt;Link the function outputs that we need&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For step one, use the drop-down menu labeled “Select analysis.” Find the picCorrelation function - it should be labeled “picCorrelation (phylogeny)” to let you know which collection it belongs with. Then click “+ Add to workflow” and you should see this function appear in the workflow as a block.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/usingArborwebapp/usingArborwebapp_13.png&quot; alt=&quot;Screenshot 13&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The function itself is a large rectangular block. The things sticking out on the left are inputs - you can see their type by hovering the mouse over each one. Squares are data matrices, triangles are phylogenies, and circles represent text values - typically, these circles control how the function works.&lt;/p&gt;

&lt;p&gt;Now let’s make some inputs. Click on each of the input tabs for your function to automatically generate function input boxes.&lt;/p&gt;

&lt;p&gt;These input boxes are blue to differentiate them from grey functions. They also only have output tabs, no inputs. All of the input boxes that you create will have to be specified by the user when you run the function, as you will see in a second.&lt;/p&gt;

&lt;p&gt;In more complicated workflows later, you will use outputs from previous steps as inputs for the next - but don’t worry about that for now.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Beware! Sometimes new input blocks pop up right on top of function blocks - so it might look like nothing has happened. Don’t panic - just click on their center and drag them out of the way.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can also rearrange the inputs to look nice.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/usingArborwebapp/usingArborwebapp_14.png&quot; alt=&quot;Screenshot 14&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: every tab for function input needs to be connected to something! Either a block that is specified by the user, or another part of the workflow.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Almost done - we only need to connect some outputs to see our results. We can do that in the same way that we created inputs - by clicking on function tabs, in this case on the output side, and creating output boxes.&lt;/p&gt;

&lt;p&gt;Output boxes are the same color as input boxes but they only have connectors on the left side. Your workflow will create a different output object for each of the output boxes that you create.&lt;/p&gt;

&lt;p&gt;You can arrange these to look nice too.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/usingArborwebapp/usingArborwebapp_15.png&quot; alt=&quot;Screenshot 15&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;run-mypicworkflow-workflow&quot;&gt;Run myPICWorkflow &lt;strong&gt;workflow&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Once you have built your workflow, you need to save it before running.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you just click run then Arbor will run the workflow as it was the last time you saved - which might not match the workflow you see on the screen!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Once you have saved, then click “Setup and run” to start the workflow. You will again have to specify inputs and options. Let’s do the same analysis we did before.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/usingArborwebapp/usingArborwebapp_16.png&quot; alt=&quot;Screenshot 16&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now click “&amp;gt; Run.” If your workflow works you will see a green &lt;em&gt;success&lt;/em&gt; message.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/usingArborwebapp/usingArborwebapp_17.png&quot; alt=&quot;Screenshot 17&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You will see that we have two new output objects, one is an image and one is a table. You can visualize both of them in the same way as above, using the “Visualization” tab.&lt;/p&gt;

&lt;p&gt;If you made it this far, nice work - you built and ran an Arbor workflow!&lt;/p&gt;
</description>
        <pubDate>Thu, 05 Jan 2017 00:00:00 -0800</pubDate>
        <link>/ssbarbor/runningfunctions/</link>
        <guid isPermaLink="true">/ssbarbor/runningfunctions/</guid>
      </item>
    
      <item>
        <title>Example datasets</title>
        <description>&lt;p&gt;Example datasets that you need for &lt;a href=&quot;/tutorials/&quot;&gt;tutorials&lt;/a&gt; and other activities on this site. These also have &lt;a href=&quot;/documentation/&quot;&gt;documentaion&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Anolis data: &lt;a href=&quot;/assets/datasets/anolis.csv&quot;&gt;anolis.csv&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Anolis tree: &lt;a href=&quot;/assets/datasets/anolis.phy&quot;&gt;anolis.phy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 04 Jan 2017 00:00:00 -0800</pubDate>
        <link>/media/datasets/</link>
        <guid isPermaLink="true">/media/datasets/</guid>
      </item>
    
      <item>
        <title>bisseMLE</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;bisseMLE is a function for finding the maximum-likelihood parameter estimates for a BiSSE model.&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;p&gt;From the &lt;a href=&quot;/../docs/&quot;&gt;docs&lt;/a&gt; page, get anolis.phy and anolis.csv.
Load these files into Arbor, and …&lt;/p&gt;

&lt;h2 id=&quot;arguments&quot;&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;table: A data table including species names&lt;/li&gt;
  &lt;li&gt;tree: A phylogenetic tree&lt;/li&gt;
  &lt;li&gt;column: The name of the column to analyze&lt;/li&gt;
  &lt;li&gt;type: The character type
    &lt;ul&gt;
      &lt;li&gt;discrete: a character with a discrete number of states&lt;/li&gt;
      &lt;li&gt;continuous: a continuously varying character&lt;/li&gt;
      &lt;li&gt;fromData: will attempt to determine the data type from the data itself&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;method: specifies the method used to reconstruct ancestral character states
    &lt;ul&gt;
      &lt;li&gt;marginal: marginal ancestral state reconstructions, which reconstruct each node integrating over all possibilities at all other nodes in the tree; this is typically the method used in the literature to reconstruce ACEs&lt;/li&gt;
      &lt;li&gt;joint: joint ancestral reconstructions, which give the configuration of ancestral states that together maximize the likelihood of the data given model parameters&lt;/li&gt;
      &lt;li&gt;mcmc: reconstruct ancestral states using Bayesian MCMC. Note that the discrete version of this doesn’t seem to work, and even if it did work it is not a full MCMC ancestral state method&lt;/li&gt;
      &lt;li&gt;stochastic: create stochastic character map&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;outputs&quot;&gt;Outputs&lt;/h2&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
</description>
        <pubDate>Wed, 04 Jan 2017 00:00:00 -0800</pubDate>
        <link>/collections/diversificationmodels/aceArbor/</link>
        <guid isPermaLink="true">/collections/diversificationmodels/aceArbor/</guid>
      </item>
    
      <item>
        <title>aceArbor</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;aceArbor is a function for carrying out ancestral state reconstruction. It works for
both discrete and continuous variables, and can reconstruct ancestral character states
under both a maximum-likelihood and a Bayesian framework. The function returns results
in two formats: a table of ancestral state estimates for each node in the tree, and a plot
of the results.&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;p&gt;From the &lt;a href=&quot;/../docs/&quot;&gt;docs&lt;/a&gt; page, get anolis.phy and anolis.csv.
Load these files into Arbor, and use them as inputs to the aceArbor function. Choose
the “ecomorph” column for analysis, and select type: discrete and method: marginal.&lt;/p&gt;

&lt;h2 id=&quot;arguments&quot;&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;table: A data table including species names&lt;/li&gt;
  &lt;li&gt;tree: A phylogenetic tree&lt;/li&gt;
  &lt;li&gt;column: The name of the column to analyze&lt;/li&gt;
  &lt;li&gt;type: The character type
    &lt;ul&gt;
      &lt;li&gt;discrete: a character with a discrete number of states&lt;/li&gt;
      &lt;li&gt;continuous: a continuously varying character&lt;/li&gt;
      &lt;li&gt;fromData: will attempt to determine the data type from the data itself&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;method: specifies the method used to reconstruct ancestral character states
    &lt;ul&gt;
      &lt;li&gt;marginal: marginal ancestral state reconstructions, which reconstruct each node integrating over all possibilities at all other nodes in the tree; this is typically the method used in the literature to reconstruce ACEs&lt;/li&gt;
      &lt;li&gt;joint: joint ancestral reconstructions, which give the configuration of ancestral states that together maximize the likelihood of the data given model parameters&lt;/li&gt;
      &lt;li&gt;mcmc: reconstruct ancestral states using Bayesian MCMC. Note that the discrete version of this doesn’t seem to work, and even if it did work it is not a full MCMC ancestral state method&lt;/li&gt;
      &lt;li&gt;stochastic: create stochastic character map&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;outputs&quot;&gt;Outputs&lt;/h2&gt;
&lt;p&gt;Function outputs a table and a plot with results of the ancestral state reconstruction.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
</description>
        <pubDate>Wed, 04 Jan 2017 00:00:00 -0800</pubDate>
        <link>/collections/ancestralstates/aceArbor/</link>
        <guid isPermaLink="true">/collections/ancestralstates/aceArbor/</guid>
      </item>
    
      <item>
        <title>Fitting models of trait evolution with Arbor</title>
        <description>&lt;p&gt;We can fit a model of evolution - for example, Brownian motion or an Mk model - to comparative data, estimating model parameters and assessing model fit. For example, if we were interested in the evolution of body size among mammals (snakes and lizards), we could fit a variety of models. For each model, we could estimate the model parameters that best fit the data. We could also compare the fit of the models and use model selection to select the best of them.&lt;/p&gt;

&lt;p&gt;Fitting models of trait evolution requires:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a phylogenetic tree with branch lengths&lt;/li&gt;
  &lt;li&gt;data for the tips of the tree. In Arbor, you don’t have to have a perfect match between the species in the tree and in your data file - but anything that is missing from either of those will be dropped from the analysis.&lt;/li&gt;
  &lt;li&gt;a model of evolution&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;how-to-do-this-analysis-in-arbor&quot;&gt;How to do this analysis in Arbor&lt;/h2&gt;

&lt;p&gt;There are two functions to fit models of trait evolution in Arbor Workflows:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/collections/traitModelFitting/fitContinuous&quot;&gt;&lt;img src=&quot;/images/fitContinuous.png&quot; alt=&quot;fitContinuous fxn&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/collections/traitModelFitting/fitContinuous&quot;&gt;fitContinuous&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/collections/traitModelFitting/fitDiscrete&quot;&gt;&lt;img src=&quot;/images/fitDiscrete.png&quot; alt=&quot;fitDiscrete fxn&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/docs/fitDiscrete&quot;&gt;fitDiscrete&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;method-assumptions&quot;&gt;Method assumptions&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;known phylogenetic tree with branch lengths&lt;/li&gt;
  &lt;li&gt;specified model of evolution&lt;/li&gt;
  &lt;li&gt;tip character states known without error&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;example&quot;&gt;Example&lt;/h3&gt;

&lt;p&gt;From the &lt;a href=&quot;/../docs/&quot;&gt;docs&lt;/a&gt; page, get anolis.phy and anolis.csv.
Load these files into Arbor, and use them as inputs to the fitDiscrete function (choose the “ecomorph” character).&lt;/p&gt;

&lt;h3 id=&quot;example-of-use-in-a-workflow&quot;&gt;Example of use in a workflow&lt;/h3&gt;

&lt;p&gt;TBA&lt;/p&gt;

&lt;h3 id=&quot;citations&quot;&gt;Citations&lt;/h3&gt;

&lt;p&gt;Harmon, L. J., J. B. Losos, J. Davies, R. G. Gillespie, J. L. Gittleman, W. B. Jennings, K. Kozak, M. A. McPeek, F. Moreno-Roark, T. J. Near, A. Purvis, R. E. Ricklefs, D. Schluter, J. A. Schulte II, O. Seehausen, B. Sidlauskas, O. Torres-Carvajal, J. T. Weir, &amp;amp; A. Ø. Mooers. 2010. Early bursts of body size and shape evolution are rare in comparative data. Evolution 64: 2385.&lt;/p&gt;

&lt;p&gt;Lewis, P.O. 2001. A likelihood approach to estimating phylogeny from discrete morphological character data. Systematic Biology 50:913-925.&lt;/p&gt;

&lt;p&gt;Pennell, M. W., J. M. Eastman, G. J. Slater, J. W. Brown, J. C. Uyeda, R. G. Fitzjohn, M. E. Alfaro, and L. J. Harmon. 2014. geiger v2.0: an expanded suite of methods for fitting macroevolutionary models to phylogenetic trees. Bioinformatics 30: 2216-2218.&lt;/p&gt;
</description>
        <pubDate>Thu, 04 Aug 2016 00:00:00 -0700</pubDate>
        <link>/tasks/trait-models/</link>
        <guid isPermaLink="true">/tasks/trait-models/</guid>
      </item>
    
      <item>
        <title>Ancestral character state estimation with Arbor</title>
        <description>&lt;p&gt;Ancestral state estimate uses some model of evolution - for example, Brownian motion or an Mk model - and estimates ancestral character states for each node in a phylogenetic tree. For example, if we were interested in the evolution of limb presence or absence among squamates (snakes and lizards), we could use ancestral state estimation. We would use a tree and character data from living species to reconstruct character states (limbs or not) for each internal node in the tree.&lt;/p&gt;

&lt;p&gt;It can be difficult to estimate ancestral character states, so most methods return estimates along with some measure of uncertainty. For example, an ancestral state estimate for limbs in squamates might return an estimate with 80% of the marginal likelihood for a limbless state, and 20% for a limbed state - in other words, we think that this species did not have limbs but we are not sure based only on the tree, data, and model of evolution.&lt;/p&gt;

&lt;p&gt;Estimating ancestral character states requires three things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a phylogenetic tree with branch lengths&lt;/li&gt;
  &lt;li&gt;data for the tips of the tree. In Arbor, you don’t have to have a perfect match between the species in the tree and in your data file - but anything that is missing from either of those will be dropped from the analysis.&lt;/li&gt;
  &lt;li&gt;a model of evolution&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;how-to-do-this-analysis-in-arbor&quot;&gt;How to do this analysis in Arbor&lt;/h2&gt;

&lt;p&gt;Arbor provides several ways to estimate ancestral character states. The easiest option is to use the Arbor App &lt;a href=&quot;/arborapps/ancestral-state/&quot;&gt;Ancestral state estimation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can also estimate ancestral character states in Arbor Workflows using the aceArbor function.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/acearbor.png&quot; alt=&quot;aceArbor&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;more-details-acearbor-arbor-workflows-function&quot;&gt;More details: aceArbor (Arbor Workflows function)&lt;/h2&gt;

&lt;p&gt;aceArbor is a function for carrying out ancestral state reconstruction. It works for
both discrete and continuous variables, and can reconstruct ancestral character states
under both a maximum-likelihood and a Bayesian framework. The function returns results
in two formats: a table of ancestral state estimates for each node in the tree, and a plot
of the results.&lt;/p&gt;

&lt;h3 id=&quot;acearbor-assumptions&quot;&gt;aceArbor assumptions&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;known phylogenetic tree with branch lengths&lt;/li&gt;
  &lt;li&gt;specified model of evolution (see below)&lt;/li&gt;
  &lt;li&gt;tip character states known without error&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;acearbor-inputs&quot;&gt;aceArbor inputs&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;table: A data table including species names&lt;/li&gt;
  &lt;li&gt;tree: A phylogenetic tree&lt;/li&gt;
  &lt;li&gt;column: The name of the column to analyze&lt;/li&gt;
  &lt;li&gt;type: The character type
    &lt;ul&gt;
      &lt;li&gt;discrete: a character with a discrete number of states&lt;/li&gt;
      &lt;li&gt;continuous: a continuously varying character&lt;/li&gt;
      &lt;li&gt;fromData: will attempt to determine the data type from the data itself&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;method: specifies the method used to reconstruct ancestral character states
    &lt;ul&gt;
      &lt;li&gt;marginal: marginal ancestral state reconstructions, which reconstruct each node integrating over all possibilities at all other nodes in the tree; this is typically the method used in the literature to reconstruce ACEs&lt;/li&gt;
      &lt;li&gt;joint: joint ancestral reconstructions, which give the configuration of ancestral states that together maximize the likelihood of the data given model parameters&lt;/li&gt;
      &lt;li&gt;mcmc: reconstruct ancestral states using Bayesian MCMC. Note that the discrete version of this doesn’t seem to work, and even if it did work it is not a full MCMC ancestral state method&lt;/li&gt;
      &lt;li&gt;stochastic: create stochastic character map&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;acearbor-outputs&quot;&gt;aceArbor outputs&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;a table and a plot with results of the ancestral state reconstruction.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;acearbor-example&quot;&gt;aceArbor example&lt;/h3&gt;

&lt;p&gt;From the &lt;a href=&quot;/../docs/&quot;&gt;docs&lt;/a&gt; page, get anolis.phy and anolis.csv.
Load these files into Arbor, and use them as inputs to the aceArbor function. Choose
the “ecomorph” column for analysis, and select type: discrete and method: marginal.&lt;/p&gt;

&lt;p&gt;Your results should look like this.&lt;/p&gt;

&lt;p&gt;Table: A table showing the internal nodes of the tree (numbered following ape’s scheme) along with marginal likelihoods for each character state.
&lt;img src=&quot;/images/acearbor-exampletable.png&quot; alt=&quot;acearbor-plot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Plot: A plot of the tree with ancestral state estimates at every node.
&lt;img src=&quot;/images/acearbor-exampleplot.png&quot; alt=&quot;acearbor-plot&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;acearbor-example-of-use-in-a-workflow&quot;&gt;aceArbor example of use in a workflow&lt;/h3&gt;

&lt;p&gt;You can see a tutorial for constructing a workflow that involves aceArbor
&lt;a href=&quot;/tutorials/reconstructing-ancestral-characters-discrete&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;acearbor-citations&quot;&gt;aceArbor citations&lt;/h3&gt;

&lt;p&gt;Lewis, P.O. 2001. A likelihood approach to estimating phylogeny from discrete morphological character data. Systematic Biology 50:913-925.&lt;/p&gt;

&lt;p&gt;Pagel, M. 1999. The maximum likelihood approach to reconstructing ancestral character states of discrete characters on phylogenies. Systematic Biology. 48: 612-622.&lt;/p&gt;

&lt;p&gt;Schluter, D., T. Price, A. O. Mooers, and D. Ludwig. 1997. Likelihood of ancestor states in adaptive radiation. Evolution 51: 1699.&lt;/p&gt;
</description>
        <pubDate>Wed, 03 Aug 2016 00:00:00 -0700</pubDate>
        <link>/tasks/ace/</link>
        <guid isPermaLink="true">/tasks/ace/</guid>
      </item>
    
      <item>
        <title>Timetrees</title>
        <description>&lt;h2 id=&quot;creating-timetrees&quot;&gt;Creating timetrees&lt;/h2&gt;

&lt;p&gt;Arbor has a few tools to create time-scaled phylogenetic trees. You can rescale your tree using standard methods like &lt;a href=&quot;&quot;&gt;pathd8&lt;/a&gt;, &lt;a href=&quot;&quot;&gt;penalized likelihood&lt;/a&gt;, or other methods that have been implemented in R. Alternatively, you can use our new tree rescaling method, described below, that calibrates a tree using dates from &lt;a href=&quot;http://timetree.org&quot;&gt;timetree&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;using-arbor-to-rescale-your-tree&quot;&gt;Using Arbor to rescale your tree&lt;/h2&gt;

&lt;p&gt;In this example, we will obtain a tree from &lt;a href=&quot;http://opentree.org&quot;&gt;open tree of life&lt;/a&gt; and rescale it using dates from &lt;a href=&quot;http://timetree.org&quot;&gt;timetree of life&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We start with a list of taxa, &lt;a href=&quot;/assets/testTaxa.csv&quot;&gt;testTaxa.csv&lt;/a&gt;. You can upload that csv file to your arbor instance, or just find it stored in the “treeTimer” collection.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/timetree/timetree-screen1.png&quot; alt=&quot;screen1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, choose and run the function called “Match taxa to the timetree of life” from the treeTimer collection.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/timetree/timetree-screen2.png&quot; alt=&quot;screen2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Use the following settings for this function:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/timetree/timetree-screen3.png&quot; alt=&quot;screen3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When the function has stopped running, you should see a success message:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/timetree/timetree-screen4.png&quot; alt=&quot;screen4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can see a plot of the output by choosing the right settings in the Visualization tab.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/timetree/timetree-screen5.png&quot; alt=&quot;screen5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is your timetree:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/timetree/timetree-output.png&quot; alt=&quot;screen6&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Apr 2016 00:00:00 -0700</pubDate>
        <link>/tutorials/timetrees/</link>
        <guid isPermaLink="true">/tutorials/timetrees/</guid>
      </item>
    
      <item>
        <title>Megaphylogenies</title>
        <description>&lt;h2 id=&quot;what-is-a-megaphylogeny&quot;&gt;What is a megaphylogeny?&lt;/h2&gt;

&lt;p&gt;Megaphylogenies are very large phylogenetic trees with thousands of tips.&lt;/p&gt;

&lt;h2 id=&quot;how-can-arbor-help-with-my-megaphylogenetic-analysis&quot;&gt;How can Arbor help with my megaphylogenetic analysis?&lt;/h2&gt;

&lt;p&gt;Arbor can help in three ways. First, using web services, Arbor can help you obtain large trees and time-scale these trees when necessary. Second, Arbor can help you match phylogenetic and character data, a complex task with very large trees. Finally, Arbor can analyze large datasets quickly and efficiently.&lt;/p&gt;

&lt;h1 id=&quot;obtaining-and-time-scaling-large-trees&quot;&gt;Obtaining and time-scaling large trees&lt;/h1&gt;

&lt;p&gt;You can use Arbor’s &lt;a href=&quot;/tutorials/webservices/&quot;&gt;web services&lt;/a&gt; to obtain large phylogenetic trees from &lt;a href=&quot;http://www.opentreeoflife.org/&quot;&gt;Open Tree of Life&lt;/a&gt;. You can then use Arbor’s &lt;a href=&quot;/tutorials/timetrees/&quot;&gt;method for time-scaling trees&lt;/a&gt; to add branch lengths to this tree.&lt;/p&gt;

&lt;h1 id=&quot;matching-phylogenetic-and-character-data&quot;&gt;Matching phylogenetic and character data&lt;/h1&gt;

&lt;p&gt;Our new &lt;a href=&quot;https://github.com/uyedaj/treeplyr&quot;&gt;treeplyr&lt;/a&gt; package is made to help match tree and character data, and manipulate the combined dataset. Try the &lt;a href=&quot;https://github.com/uyedaj/treeplyr/wiki&quot;&gt;treeplyr tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;analyzing-large-datasets&quot;&gt;Analyzing large datasets&lt;/h1&gt;

&lt;p&gt;Arbor code has been optimized to handle &lt;a href=&quot;/tutorials/verylargetrees/&quot;&gt;very large datasets&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Apr 2016 00:00:00 -0700</pubDate>
        <link>/tutorials/megatrees/</link>
        <guid isPermaLink="true">/tutorials/megatrees/</guid>
      </item>
    
      <item>
        <title>testTaxa.csv</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;List of species that can be used to query both open tree of life and timetree.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
</description>
        <pubDate>Mon, 18 Apr 2016 00:00:00 -0700</pubDate>
        <link>/collections/timetree/data/testTaxa-csv/</link>
        <guid isPermaLink="true">/collections/timetree/data/testTaxa-csv/</guid>
      </item>
    
      <item>
        <title>phelsuma.phy</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Phylogenetic tree of Phelsuma lizards.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
</description>
        <pubDate>Mon, 18 Apr 2016 00:00:00 -0700</pubDate>
        <link>/collections/phylogeny/data/phelsuma-phy/</link>
        <guid isPermaLink="true">/collections/phylogeny/data/phelsuma-phy/</guid>
      </item>
    
  </channel>
</rss>
