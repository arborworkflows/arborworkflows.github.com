<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Arbor</title>
  <generator uri="https://github.com/jekyll/jekyll">Jekyll v3.1.6</generator>
    <icon>/apple-touch-icon-precomposed.png</icon>
  <subtitle>Arbor workflows</subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="/" rel="alternate" type="text/html"/>
  <updated>2018-05-08T10:59:11-07:00</updated>
  <id>/</id>
  <author>
    <name>Luke Harmon</name>
    <uri>/</uri>
    <email>lukeh@uidaho.edu</email>
  </author>

  
  <entry>
    <title>Plot tree using d3</title>
    <link href="/arborapps/treePlot/"/>
    <updated>2017-05-31T00:00:00-07:00</updated>
    <id>/arborapps/treePlot</id>
    <author>
      <name>Luke Harmon</name>
      <uri>/</uri>
      <email>lukeh@uidaho.edu</email>
    </author>
    <content type="html">
      
      &lt;meta http-equiv=&quot;refresh&quot; content=&quot;0;url=http://arbordev.arborworkflows.com/treePlot/&quot; /&gt;

&lt;p&gt;You should be automatically forwarded to the Arbor app. If not, click &lt;a href=&quot;http://arbordev.arborworkflows.com/treePlot/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

    </content>
  </entry>
  
  <entry>
    <title>Stochastic character mapping using simmap</title>
    <link href="/arborapps/simmap/"/>
    <updated>2017-05-31T00:00:00-07:00</updated>
    <id>/arborapps/simmap</id>
    <author>
      <name>Luke Harmon</name>
      <uri>/</uri>
      <email>lukeh@uidaho.edu</email>
    </author>
    <content type="html">
      
      &lt;meta http-equiv=&quot;refresh&quot; content=&quot;0;url=http://arbordev.arborworkflows.com/simmap/&quot; /&gt;

&lt;p&gt;You should be automatically forwarded to the Arbor app. If not, click &lt;a href=&quot;http://arbordev.arborworkflows.com/simmap/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

    </content>
  </entry>
  
  <entry>
    <title>Phylogenetic independent contrasts</title>
    <link href="/arborapps/pic/"/>
    <updated>2017-05-31T00:00:00-07:00</updated>
    <id>/arborapps/pic</id>
    <author>
      <name>Luke Harmon</name>
      <uri>/</uri>
      <email>lukeh@uidaho.edu</email>
    </author>
    <content type="html">
      
      &lt;meta http-equiv=&quot;refresh&quot; content=&quot;0;url=http://arbordev.arborworkflows.com/PIC/&quot; /&gt;

&lt;p&gt;You should be automatically forwarded to the Arbor app. If not, click &lt;a href=&quot;http://arbordev.arborworkflows.com/PIC/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

    </content>
  </entry>
  
  <entry>
    <title>Lineage-through-time plots</title>
    <link href="/arborapps/ltt/"/>
    <updated>2017-05-31T00:00:00-07:00</updated>
    <id>/arborapps/ltt</id>
    <author>
      <name>Luke Harmon</name>
      <uri>/</uri>
      <email>lukeh@uidaho.edu</email>
    </author>
    <content type="html">
      
      &lt;meta http-equiv=&quot;refresh&quot; content=&quot;0;url=http://arbordev.arborworkflows.com/ltt/&quot; /&gt;

&lt;p&gt;You should be automatically forwarded to the Arbor app. If not, click &lt;a href=&quot;http://arbordev.arborworkflows.com/ltt/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

    </content>
  </entry>
  
  <entry>
    <title>PGLS - two variables only (for now!)</title>
    <link href="/arborapps/pgls/"/>
    <updated>2017-05-30T00:00:00-07:00</updated>
    <id>/arborapps/pgls</id>
    <author>
      <name>Luke Harmon</name>
      <uri>/</uri>
      <email>lukeh@uidaho.edu</email>
    </author>
    <content type="html">
      &lt;img src=&quot;/images/arborPGLS-1600x800.jpg&quot;&gt;&lt;br/&gt;
      &lt;meta http-equiv=&quot;refresh&quot; content=&quot;0;url=http://arbordev.arborworkflows.com/PGLS-twovars/&quot; /&gt;

&lt;p&gt;You should be automatically forwarded to the Arbor app. If not, click &lt;a href=&quot;http://arbordev.arborworkflows.com/PGLS-twovars/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

    </content>
  </entry>
  
  <entry>
    <title>Ancestral state reconstruction</title>
    <link href="/arborapps/ancestral-state/"/>
    <updated>2017-05-29T00:00:00-07:00</updated>
    <id>/arborapps/ancestral-state</id>
    <author>
      <name>Luke Harmon</name>
      <uri>/</uri>
      <email>lukeh@uidaho.edu</email>
    </author>
    <content type="html">
      &lt;img src=&quot;/images/branch-1600x800.jpg&quot;&gt;&lt;br/&gt;
      &lt;meta http-equiv=&quot;refresh&quot; content=&quot;0;url=http://arbordev.arborworkflows.com/ancestral-state/&quot; /&gt;

&lt;p&gt;You should be automatically forwarded to the Arbor app. If not, click &lt;a href=&quot;http://arbordev.arborworkflows.com/ancestral-state/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

    </content>
  </entry>
  
  <entry>
    <title>Phylogenetic signal</title>
    <link href="/arborapps/phylogenetic-signal/"/>
    <updated>2017-05-28T00:00:00-07:00</updated>
    <id>/arborapps/phylogenetic-signal</id>
    <author>
      <name>Luke Harmon</name>
      <uri>/</uri>
      <email>lukeh@uidaho.edu</email>
    </author>
    <content type="html">
      &lt;img src=&quot;/images/easyButtons-1600x800.jpg&quot;&gt;&lt;br/&gt;
      &lt;meta http-equiv=&quot;refresh&quot; content=&quot;0;url=http://arbordev.arborworkflows.com/phylogenetic-signal/&quot; /&gt;

&lt;p&gt;You should be automatically forwarded to the Arbor app. If not, click &lt;a href=&quot;http://arbordev.arborworkflows.com/phylogenetic-signal/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

    </content>
  </entry>
  
  <entry>
    <title>makeBD</title>
    <link href="/collections/diversificationmodels/makeBD/"/>
    <updated>2017-01-26T00:00:00-08:00</updated>
    <id>/collections/diversificationmodels/makeBD</id>
    <author>
      <name>Luke Harmon</name>
      <uri>/</uri>
      <email>lukeh@uidaho.edu</email>
    </author>
    <content type="html">
      
      &lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;makeBD is a function for setting up a birth-death model in Arbor. Use in conjunction with fitBD.&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;p&gt;From the &lt;a href=&quot;/documentation/datasets/&quot;&gt;docs&lt;/a&gt; page, get anolis.phy and anolis.csv.
Load these files into Arbor, and …&lt;/p&gt;

&lt;h2 id=&quot;arguments&quot;&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;table: A data table including species names&lt;/li&gt;
  &lt;li&gt;tree: A phylogenetic tree&lt;/li&gt;
  &lt;li&gt;column: The name of the column to analyze&lt;/li&gt;
  &lt;li&gt;type: The character type
    &lt;ul&gt;
      &lt;li&gt;discrete: a character with a discrete number of states&lt;/li&gt;
      &lt;li&gt;continuous: a continuously varying character&lt;/li&gt;
      &lt;li&gt;fromData: will attempt to determine the data type from the data itself&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;method: specifies the method used to reconstruct ancestral character states
    &lt;ul&gt;
      &lt;li&gt;marginal: marginal ancestral state reconstructions, which reconstruct each node integrating over all possibilities at all other nodes in the tree; this is typically the method used in the literature to reconstruce ACEs&lt;/li&gt;
      &lt;li&gt;joint: joint ancestral reconstructions, which give the configuration of ancestral states that together maximize the likelihood of the data given model parameters&lt;/li&gt;
      &lt;li&gt;mcmc: reconstruct ancestral states using Bayesian MCMC. Note that the discrete version of this doesn’t seem to work, and even if it did work it is not a full MCMC ancestral state method&lt;/li&gt;
      &lt;li&gt;stochastic: create stochastic character map&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;outputs&quot;&gt;Outputs&lt;/h2&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

    </content>
  </entry>
  
  <entry>
    <title>Web services 2</title>
    <link href="/tutorials/webservices/"/>
    <updated>2017-01-08T00:00:00-08:00</updated>
    <id>/tutorials/webservices</id>
    <author>
      <name>Luke Harmon</name>
      <uri>/</uri>
      <email>lukeh@uidaho.edu</email>
    </author>
    <content type="html">
      
      &lt;h2 id=&quot;what-are-web-services&quot;&gt;What are web services?&lt;/h2&gt;

&lt;p&gt;Web services are protocols for computers to exchange information over the web (see &lt;a href=&quot;https://en.wikipedia.org/wiki/Web_service&quot;&gt;wikipedia: web service&lt;/a&gt;), typically via an &lt;a href=&quot;https://en.wikipedia.org/wiki/Application_programming_interface&quot;&gt;API&lt;/a&gt;. In biology, web services are becoming more and more common. You can obtain, for example, phylogenetic trees from &lt;a href=&quot;http://opentreeoflife.org/&quot;&gt;Open Tree of Life&lt;/a&gt;, geographic occurrences from &lt;a href=&quot;http://www.gbif.org/&quot;&gt;GBIF&lt;/a&gt;, and trait data from &lt;a href=&quot;http://eol.org/&quot;&gt;Encyclopedia of Life&lt;/a&gt;, all using web services.&lt;/p&gt;

&lt;p&gt;We have a number of pre-made functions in Arbor that can obtain data through web services. These functions can be included in workflows that make it easy to combine your data with data obtained over the web and carry out analyses. In this tutorial we will illustrate one of these applications, starting with a list of species and obtaining a phylogenetic tree from Open Tree of Life.&lt;/p&gt;

&lt;h2 id=&quot;example-from-a-list-of-species-to-a-phylogenetic-tree&quot;&gt;Example: from a list of species to a phylogenetic tree&lt;/h2&gt;

&lt;p&gt;We are going to start with a list of species. You can obtain this list as a csv file &lt;a href=&quot;/assets/mammal_species_list.csv&quot;&gt;here&lt;/a&gt;; download and save this file somewhere to your computer.&lt;/p&gt;

&lt;p&gt;Now, open an Arbor instance (e.g. &lt;a href=&quot;http://arbor.arborworkflows.com&quot;&gt;Arbor web app&lt;/a&gt;). You will now need to load in your species list. You can do this by dragging the file that you just downloaded onto the “Browse or drop files” box:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/webServices/webserv-screen1.png&quot; alt=&quot;screen1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(you can also see our tutorial on &lt;a href=&quot;/tutorials/using-the-arbor-webapp/&quot;&gt;using the Arbor webapp&lt;/a&gt;) for more information on loading data into Arbor)&lt;/p&gt;

&lt;p&gt;We will be building a workflow to do this analysis. Note that you need to be logged in and have write access to a collection to make the next parts work!&lt;/p&gt;

&lt;p&gt;Click over to the “Analysis” tab, and create a new workflow. To do that, type the name of the new workflow it the box under “Create new analysis.” Let’s call our workflow “getOTLTreeAndPlot.”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/webServices/webserv-screen2.png&quot; alt=&quot;screen2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you have created the workflow, you should be able to view and edit (but right now it is just a blank white space!)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/webServices/webserv-screen3.png&quot; alt=&quot;screen3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first step in this workflow is to match the species names with the names in the Open Tree of Life Taxonomy (OTT). To do this, we will use a function in the “advanced-opentree” collection called “Lookup Names Using OpenTree Taxonomy.” Add this function to your workflow using the “+ add to workflow” button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/webServices/webserv-screen4.png&quot; alt=&quot;screen4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can click the tab on the left side of that new workflow step to indicate that the user will send a data table directly to this function. So our workflow is now:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/webServices/webserv-screen5.png&quot; alt=&quot;screen5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we need to pull out an “induced subtree” from open tree of life using the OTT ids that we obtained in the previous step. To do that, add a new function to your workflow, again from the “advanced-opentree” collection: “Return the Open Tree Subtree from a node list.” Add and connect that next step to your workflow:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/webServices/webserv-screen6.png&quot; alt=&quot;screen6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we just need to plot our resulting tree. You can use a function from the “advanced-phylogenyTools” collection called “PlotTreeWithApe.” Add that function, connect it to your workflow, and specify that the last output be sent to the user:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/webServices/webserv-screen7.png&quot; alt=&quot;screen7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now just click “Setup and run.” In the box that appears, choose your input file with the list of mammal species names.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/webServices/webserv-screen8.png&quot; alt=&quot;screen8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The workflow will run for a while:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/webServices/webserv-screen9.png&quot; alt=&quot;screen9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And then finish:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/webServices/webserv-screen10.png&quot; alt=&quot;screen10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can then change to the “visualization” tab, and select the output from your workflow.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/webServices/webserv-screen11.png&quot; alt=&quot;screen11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We then see the final result:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/webServices/webserv-screen12.png&quot; alt=&quot;screen12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is a phylogenetic tree pulled from the Open Tree of Life synthesis that includes all of the species in the table that you supplied.&lt;/p&gt;

    </content>
  </entry>
  
  <entry>
    <title>Creating new collections and functions</title>
    <link href="/tutorials/functions-and-collections/"/>
    <updated>2017-01-06T00:00:00-08:00</updated>
    <id>/tutorials/functions-and-collections</id>
    <author>
      <name>Luke Harmon</name>
      <uri>/</uri>
      <email>lukeh@uidaho.edu</email>
    </author>
    <content type="html">
      
      &lt;h2 id=&quot;how-to-make-your-own-collection-of-arbor-functions-and-workflows&quot;&gt;How to make your own collection of Arbor functions and workflows&lt;/h2&gt;

&lt;p&gt;When working in Arbor, you will be uploading your own data, and may want to create your own functions and workflows. Everything in Arbor is organized into collections (for example, the phylogeny and base collections). You can create your own collection to store data and workflows. Later I will discuss how you can share any items in your collection with colleagues.&lt;/p&gt;

&lt;h2 id=&quot;get-started&quot;&gt;Get started&lt;/h2&gt;

&lt;p&gt;You will need to open the &lt;a href=&quot;http://arbor.arborworkflows.com&quot;&gt;Arbor web app&lt;/a&gt;. For this exercise, you will need to log in; your user name should match the personal part of the email address you used to register for the meeting. For example, if your registration email is lukeh@uidaho.edu, then your user name is lukeh. Your password will be given to you by the instructor.&lt;/p&gt;

&lt;p&gt;Once you are logged in, your screen should look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/creatingaCollection/screen1.png&quot; alt=&quot;Screenshot 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You will need the anolis example data files, &lt;a href=&quot;/assets/datasets/anolis.phy&quot;&gt;anolis.phy&lt;/a&gt; and &lt;a href=&quot;/assets/datasets/anolis.csv&quot;&gt;anolis.csv&lt;/a&gt;. Save those files somewhere on your computer.&lt;/p&gt;

&lt;h2 id=&quot;create-a-new-collection&quot;&gt;Create a new collection&lt;/h2&gt;

&lt;p&gt;On the left side of the screen, just below the “Browse or drop files” box, is the place you will need to focus to create your new collection. In the box there you can type the name of a new collection - let’s use &lt;em&gt;testCollection&lt;/em&gt; here, so type that in the box. If you want the collection to be public, you can tick the &lt;em&gt;public&lt;/em&gt; box. Otherwise, the collection will be private and only visible to you. Keep this test collection private for this example. Now click the “New collection” button, and your collection will be created.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/creatingaCollection/screen2.png&quot; alt=&quot;Screenshot 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Immediately after creating my new collection. Did it work?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Scroll down to see more collections, the one you just created will be at the bottom. Click on both the “eye” and the “pencil” next to your collection. The “eye” lets you see the things in your collection, and the pencil gives write access so that you can add things to the collection (and delete!).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/creatingaCollection/screen3.png&quot; alt=&quot;Screenshot 3&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;saving-data-to-your-new-collection&quot;&gt;Saving data to your new collection&lt;/h2&gt;

&lt;p&gt;Once you have created your collection, you can add data to it. Drag the “anolis.csv” file to the “Browse or drop files” box to load it into your browser. You can now save this file to your new collection. To do that, scroll down to the very bottom of the bottom browser frame, where you should see “Save or download data.” “anolis.csv” should show up there.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/creatingaCollection/screen4.png&quot; alt=&quot;Screenshot 4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As long as the pencil next to your new collection is highlighted, you can now click “Save to checked collection” to save this data file to the new collection. Try that now. The name of the collection should show up next to the datafile:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/creatingaCollection/screen5.png&quot; alt=&quot;Screenshot 5&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;creating-new-analyses-and-workflows-in-your-new-collection&quot;&gt;Creating new analyses and workflows in your new collection&lt;/h2&gt;

&lt;p&gt;Now, move over to the “Analysis” tab. You can create new analyses and workflows in your new collection by clicking on “+ New analysis” or “+ New workflow.”&lt;/p&gt;

&lt;p&gt;Let’s start with a simple new analysis. We can create a function that will automatically multiply all the branch lengths in our tree by some factor, x. We will call this new function “multiplyBranchLengths.” Our function will have two inputs, a phylogenetic tree and a branch multiplier x, and a single output, the rescaled tree.&lt;/p&gt;

&lt;p&gt;The first thing to do is to create our new analysis. Put the function name, “multiplyBranchLengths,” in the box under “Create new analysis.”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/creatingaCollection/ssbarbor1.png&quot; alt=&quot;Screenshot ssbarbor1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, push the button that says “New analysis.”&lt;/p&gt;

&lt;p&gt;You have just created an (empty) analysis. Now click “Show script” and “Edit” to allow us to put some code into our analysis. You should also change the language to “R” instead of “Python” (look in the row of options after &amp;gt;Setup and run). Your screen should now look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/creatingaCollection/ssbarbor2.png&quot; alt=&quot;Screenshot ssbarbor2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can now paste a snippet of R code into this window to make our analysis happen. All we need is two lines:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rescaledPhy &amp;lt;- phy
rescaledPhy$edge.length &amp;lt;- rescaledPhy$edge.length * x
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Paste that into your analysis:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/creatingaCollection/ssbarbor3.png&quot; alt=&quot;Screenshot ssbarbor3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We now need to specify the function inputs and outputs. First, click the small “+” button next to “Inputs” at the bottom of the page:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/creatingaCollection/ssbarbor4.png&quot; alt=&quot;Screenshot ssbarbor4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can then specify a name for this input, as well as its Id in the code. Fill out the “Configure input” box like this, then click “Update”:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/creatingaCollection/ssbarbor5.png&quot; alt=&quot;Screenshot ssbarbor5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Do the same thing to create a second input for our branch multiplier, but with the “Configure input” box filled out for a number:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/creatingaCollection/ssbarbor6.png&quot; alt=&quot;Screenshot ssbarbor6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you do this right, you should see the Inputs specified:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/creatingaCollection/ssbarbor7.png&quot; alt=&quot;Screenshot ssbarbor7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, make an output by clicking the + next to “Outputs.” Fill out the “Configure output” box:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/creatingaCollection/ssbarbor8.png&quot; alt=&quot;Screenshot ssbarbor8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now you can see all of your inputs and outputs:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/creatingaCollection/ssbarbor9.png&quot; alt=&quot;Screenshot ssbarbor9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;OK! Make sure to click “Save” to save all of your work.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/creatingaCollection/ssbarbor10.png&quot; alt=&quot;Screenshot ssbarbor10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You should see a confirmation that your work is saved:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/creatingaCollection/ssbarbor11.png&quot; alt=&quot;Screenshot ssbarbor11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, let’s try running your new function. Once you have saved the function, click on “&amp;gt; Setup and run.” Fill out the box that appears:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/creatingaCollection/ssbarbor12.png&quot; alt=&quot;Screenshot ssbarbor12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once the function runs, you should get a green success message:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/creatingaCollection/ssbarbor13.png&quot; alt=&quot;Screenshot ssbarbor13&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, we will try to use this rescaled tree to do something.&lt;/p&gt;

&lt;h2 id=&quot;building-a-workflow-that-includes-your-new-function&quot;&gt;Building a workflow that includes your new function&lt;/h2&gt;

&lt;p&gt;We will now build a workflow that includes two steps: rescaling your tree, and then fitting a model of evolution for a trait on that rescaled tree.&lt;/p&gt;

&lt;p&gt;Create a new analysis called “rescaledTraitEvo,” but this time make sure to click the button that says “New workflow.”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/creatingaCollection/ssbarbor14.png&quot; alt=&quot;Screenshot ssbarbor14&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As long as you have “Show script” and “Edit” active, you should see a blank space where your workflow will go.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/creatingaCollection/ssbarbor15.png&quot; alt=&quot;Screenshot ssbarbor15&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s add the two functions that will be part of our workflow. First. using the “Select analysis” chooser, find your new function (multiplyBranchLengths) and use the “+Add to workflow” button to add it to your workflow.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/creatingaCollection/ssbarbor16.png&quot; alt=&quot;Screenshot ssbarbor16&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you do that, your function should appear as a workflow block.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/creatingaCollection/ssbarbor17.png&quot; alt=&quot;Screenshot ssbarbor17&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now add a block for the other function you need, “fit discrete.” It is part of the “traitModels” collection, so make sure that collection is highlighted as visible under the Data Management tab.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/creatingaCollection/ssbarbor18.png&quot; alt=&quot;Screenshot ssbarbor18&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now select the function you need and click “+Add to workflow”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/creatingaCollection/ssbarbor19.png&quot; alt=&quot;Screenshot ssbarbor19&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Shazam! the function appears in your workflow. But wait? What happened to the other function?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/creatingaCollection/ssbarbor20.png&quot; alt=&quot;Screenshot ssbarbor20&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Don’t worry, it was just hiding underneath.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/creatingaCollection/ssbarbor21.png&quot; alt=&quot;Screenshot ssbarbor21&quot; /&gt;&lt;/p&gt;

&lt;p&gt;OK, now we just need to wire this workflow together! First, we know that the output tree from “multiplyBranchLengths” goes to the input tree of “Fit continuous.” Connect those two with a wire.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/creatingaCollection/ssbarbor22.png&quot; alt=&quot;Screenshot ssbarbor22&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Everything else is a user input or output. To create those, just click on each tab.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/creatingaCollection/ssbarbor23.png&quot; alt=&quot;Screenshot ssbarbor23&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You might need to move things around to make the workflow look nice.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/creatingaCollection/ssbarbor24.png&quot; alt=&quot;Screenshot ssbarbor24&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Make sure to save your workflow!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/creatingaCollection/ssbarbor25.png&quot; alt=&quot;Screenshot ssbarbor25&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can now use the “&amp;gt; Setup and run” button to run our workflow.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/creatingaCollection/ssbarbor26.png&quot; alt=&quot;Screenshot ssbarbor26&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Designate these inputs:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/creatingaCollection/ssbarbor27.png&quot; alt=&quot;Screenshot ssbarbor27&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It worked!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/creatingaCollection/ssbarbor28.png&quot; alt=&quot;Screenshot ssbarbor28&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see the results in the Visualization tab:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/creatingaCollection/ssbarbor29.png&quot; alt=&quot;Screenshot ssbarbor29&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click “Update”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/creatingaCollection/ssbarbor30.png&quot; alt=&quot;Screenshot ssbarbor30&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Compare this to what we get with the original tree. Notice any differences? Explain!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/creatingaCollection/ssbarbor31.png&quot; alt=&quot;Screenshot ssbarbor31&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;loading-a-shared-workflow-to-your-collection&quot;&gt;Loading a shared workflow to your collection&lt;/h2&gt;

&lt;p&gt;Next, I will show you how to load in a workflow file that has been downloaded in JSON format. Imagine, for example, that a colleague emailed you an arbor workflow called mywork.json. You can download such a file &lt;a href=&quot;/assets/creatingaCollection/fitTraitModels.json&quot;&gt;here&lt;/a&gt;. (NOTE: you might have to right-click and “save as” for this file, or save as plain text with extension .json if it opens in your browser). Now, to load that workflow into your new collection, click on “Upload… “ and find the fitTraitModels.json file. The new workflow is now in your collection!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/creatingaCollection/screen6.png&quot; alt=&quot;Screenshot 6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can see the new workflow by clicking “Show script.”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/creatingaCollection/screen7.png&quot; alt=&quot;Screenshot 7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can even edit this workflow using the “Edit” button (keep in mind that you have to hit “Save” for the changes to go into effect).&lt;/p&gt;

&lt;p&gt;Finally, you can download your new workflow using the “Save” button, which generates a json-formatted version of your workflow. This text file includes all of the information and code that you need to run your workflow - but not the data! You can easily share these json files with collaborators or make them available on Github or other archives.&lt;/p&gt;

    </content>
  </entry>
  
  <entry>
    <title>Using the Arbor webapp</title>
    <link href="/tutorials/runningfunctions/"/>
    <updated>2017-01-05T00:00:00-08:00</updated>
    <id>/tutorials/runningfunctions</id>
    <author>
      <name>Luke Harmon</name>
      <uri>/</uri>
      <email>lukeh@uidaho.edu</email>
    </author>
    <content type="html">
      
      &lt;h2 id=&quot;how-to-run-functions-for-comparative-analyses-in-arbor&quot;&gt;How to run functions for comparative analyses in Arbor&lt;/h2&gt;

&lt;p&gt;So, you want to use the Arbor web app to do some comparative analyses?&lt;/p&gt;

&lt;p&gt;The Arbor web app is a flexible workflow engine that will let you carry out a wide range of visualizations
and analyses. You can upload data files from your computer, or use data from a range of web services.&lt;/p&gt;

&lt;p&gt;For this example, I will walk you through the steps you need to use the Arbor web app. I will set up a
basic analysis of a correlation between two continuous characters using independent contrasts.&lt;/p&gt;

&lt;h2 id=&quot;get-started&quot;&gt;Get started&lt;/h2&gt;

&lt;p&gt;You will need the anolis example data files, &lt;a href=&quot;/assets/datasets/anolis.phy&quot;&gt;anolis.phy&lt;/a&gt; and &lt;a href=&quot;/assets/datasets/anolis.csv&quot;&gt;anolis.csv&lt;/a&gt;. Save those files somewhere on your computer.&lt;/p&gt;

&lt;p&gt;Now open the &lt;a href=&quot;http://arbordev.arborworkflows.com&quot;&gt;Arbor web app&lt;/a&gt; (this is a special instance of Arbor hosted on Amazon Web Services just for this meeting). Your screen should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/usingArborwebapp/usingArborwebapp_1.png&quot; alt=&quot;Screenshot 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You might notice some differences between this screen and the particular collections that are available to you - don’t worry too much about that.&lt;/p&gt;

&lt;p&gt;If you want, you can log in here; your user name should match the personal part of the email address you used to register for the meeting. For example, if your registration email is lukeh@uidaho.edu, then your user name is lukeh. The password will be given to you by the instructor. Note also that for this and some other examples in the workshop,  you don’t actually need to log in, you can do the analyses on the web without an account.&lt;/p&gt;

&lt;h2 id=&quot;upload-your-data&quot;&gt;Upload your data&lt;/h2&gt;

&lt;p&gt;Near the bottom of the Arbor web app screen you will see a blue box that says “Browse or drop files.” This is how you can get your data into Arbor. There are two options: either you can click the box and browse to the file you want, or you can drag the file onto the box and let go. Arbor should recognize what type of file you have added (in this case, tree or datafile) and store them in the correct way.&lt;/p&gt;

&lt;p&gt;Using this method, load in both anolis.phy and anolis.csv. If you want to make sure that your upload worked, you can use the dropdown menu that says “Save or download data.” If you have properly loaded the files you will see them appear in that list.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/usingArborwebapp/usingArborwebapp_2.png&quot; alt=&quot;Screenshot 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This is what my screen looks like after uploading anolis.csv - note that anolis.phy is also in the “Save or download data” dropdown, as I uploaded it just before.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Note: Since you have not added your files to any collections, they will appear like this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;anolis.csv&lt;/li&gt;
  &lt;li&gt;anolis.phy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You may also see the same files stored in a collection, depending on how your web app is set up. If you see versions of those stored files from the “sampleDatasets” collection, for example, they will look like this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;anolis.csv (sampleDatasets)&lt;/li&gt;
  &lt;li&gt;anolis.phy (sampleDatasets)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Those stored files will work fine for the exercise, but try to use the ones you uploaded so that you can get the hang of using your own data in Arbor. Also, since these datasets are uploaded but not saved, if you &lt;strong&gt;refresh your browser&lt;/strong&gt; or even &lt;strong&gt;accidentally go to a different page&lt;/strong&gt;, the datasets will be gone when you come back. If you want to save your uploaded data then you should login and make a personal collection.&lt;/p&gt;

&lt;h2 id=&quot;select-the-collections-you-want&quot;&gt;Select the collections you want&lt;/h2&gt;

&lt;p&gt;For this exercise, you will use functions from one arbor collections, “generalLinearModels.” This collection contains functions to test for linear relationships among a set of variables. All available collections are listed to the right side of the Data Management tab.&lt;/p&gt;

&lt;p&gt;To gain access to functions in those collections, click the little eyeball next to “generalLinearModels.” Your screen should now look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/usingArborwebapp/usingArborwebapp_3_alt.png&quot; alt=&quot;Screenshot 3&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;navigate-to-the-analysis-tab&quot;&gt;Navigate to the “analysis” tab&lt;/h2&gt;

&lt;p&gt;You are done with the Data Management tab, and will need to move to the “Analysis” tab to carry out your analysis. Click on the Analysis tab to switch. Your screen should now look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/usingArborwebapp/alt_4.png&quot; alt=&quot;Screenshot 4&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;try-out-the-piccorrelation-function&quot;&gt;Try out the picCorrelation &lt;strong&gt;function&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;We can now do some comparative analyses! Arbor has two types of analyses: functions and workflows. Later, we will build a workflow - but actually, for this problem, there is a single function that we can use to get output immediately.&lt;/p&gt;

&lt;p&gt;The function we need is called &lt;strong&gt;picCorrelation&lt;/strong&gt;, and it is part of the &lt;em&gt;generalLinearModels&lt;/em&gt; collection.&lt;/p&gt;

&lt;p&gt;First, select this function (in the &lt;em&gt;Select analysis&lt;/em&gt; dropdown menu). You can inspect the function by clicking “Show script” (this example is in R). You should see this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/usingArborwebapp/usingArborwebapp_5.png&quot; alt=&quot;Screenshot 5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can now run the function by clicking the small blue button that says “&amp;gt; Setup and run.” This brings up a dialog box. Fill in the missing details in this box to analyze hostility (dep_variable) as a function of awesomeness (ind_variable). Choose the table and tree that you entered earlier, and set “plotPICs” to “yes.” Your form should look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/usingArborwebapp/usingArborwebapp_6.png&quot; alt=&quot;Screenshot 6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now press “&amp;gt; Run” and see what happens. If your run works, you should see a &lt;em&gt;success&lt;/em&gt; message:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/usingArborwebapp/usingArborwebapp_7.png&quot; alt=&quot;Screenshot 7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here, Arbor is telling us that the function had two outputs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;picCorrelation picPlot, which is an &lt;em&gt;image&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;picCorrelation tableResults, which is a &lt;em&gt;table&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s have a look at the outputs.&lt;/p&gt;

&lt;h2 id=&quot;visualize-the-outputs-of-the-piccorrelation-function&quot;&gt;Visualize the outputs of the picCorrelation function&lt;/h2&gt;

&lt;p&gt;To see the outputs of an Arbor function (or workflow) we can go to the &lt;strong&gt;Visualization&lt;/strong&gt; tab. Click on it now. Your screen should look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/usingArborwebapp/usingArborwebapp_8.png&quot; alt=&quot;Screenshot 8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note that the top part of the screen did not change, but the bottom tabs and buttons did. That’s ok! Keep going.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We can look at the plot first. Set the “Select visualization” dropdown to “image”, and you should see your output, called “picCorrelation picPlot”, appear under “data.” To activate this visualization click on the blue &lt;strong&gt;Update&lt;/strong&gt; button. The result should be a plot.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/usingArborwebapp/usingArborwebapp_9.png&quot; alt=&quot;Screenshot 9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(You can see more of the plot by clicking on the small downward-facing arrow above the “Log In or Register” section of the screen).&lt;/p&gt;

&lt;p&gt;Next, let’s see some numbers. Change “Select visualization” to “table”, and “data” to “picCorrelation tableResults.” Hit update again to see an ANOVA table summarizing the results of the phylogenetic regression.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/usingArborwebapp/usingArborwebapp_10.png&quot; alt=&quot;Screenshot 10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The p-value is the top number in the column denoted “Pr(&amp;gt;F).”&lt;/p&gt;

    </content>
  </entry>
  
  <entry>
    <title>Example datasets</title>
    <link href="/media/datasets/"/>
    <updated>2017-01-04T00:00:00-08:00</updated>
    <id>/media/datasets</id>
    <author>
      <name>Luke Harmon</name>
      <uri>/</uri>
      <email>lukeh@uidaho.edu</email>
    </author>
    <content type="html">
      
      &lt;p&gt;Example datasets that you need for &lt;a href=&quot;/tutorials/&quot;&gt;tutorials&lt;/a&gt; and other activities on this site. These also have &lt;a href=&quot;/documentation/&quot;&gt;documentaion&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Anolis data: &lt;a href=&quot;/assets/datasets/anolis.csv&quot;&gt;anolis.csv&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Anolis tree: &lt;a href=&quot;/assets/datasets/anolis.phy&quot;&gt;anolis.phy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

    </content>
  </entry>
  
  <entry>
    <title>bisseMLE</title>
    <link href="/collections/diversificationmodels/bisseMLE/"/>
    <updated>2017-01-04T00:00:00-08:00</updated>
    <id>/collections/diversificationmodels/bisseMLE</id>
    <author>
      <name>Luke Harmon</name>
      <uri>/</uri>
      <email>lukeh@uidaho.edu</email>
    </author>
    <content type="html">
      
      &lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;bisseMLE is a function for finding the maximum-likelihood parameter estimates for a BiSSE model.&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;p&gt;From the &lt;a href=&quot;/documentation/datasets/&quot;&gt;docs&lt;/a&gt; page, get anolis.phy and anolis.csv.
Load these files into Arbor, and …&lt;/p&gt;

&lt;h2 id=&quot;arguments&quot;&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;table: A data table including species names&lt;/li&gt;
  &lt;li&gt;tree: A phylogenetic tree&lt;/li&gt;
  &lt;li&gt;column: The name of the column to analyze&lt;/li&gt;
  &lt;li&gt;type: The character type
    &lt;ul&gt;
      &lt;li&gt;discrete: a character with a discrete number of states&lt;/li&gt;
      &lt;li&gt;continuous: a continuously varying character&lt;/li&gt;
      &lt;li&gt;fromData: will attempt to determine the data type from the data itself&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;method: specifies the method used to reconstruct ancestral character states
    &lt;ul&gt;
      &lt;li&gt;marginal: marginal ancestral state reconstructions, which reconstruct each node integrating over all possibilities at all other nodes in the tree; this is typically the method used in the literature to reconstruce ACEs&lt;/li&gt;
      &lt;li&gt;joint: joint ancestral reconstructions, which give the configuration of ancestral states that together maximize the likelihood of the data given model parameters&lt;/li&gt;
      &lt;li&gt;mcmc: reconstruct ancestral states using Bayesian MCMC. Note that the discrete version of this doesn’t seem to work, and even if it did work it is not a full MCMC ancestral state method&lt;/li&gt;
      &lt;li&gt;stochastic: create stochastic character map&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;outputs&quot;&gt;Outputs&lt;/h2&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

    </content>
  </entry>
  
  <entry>
    <title>aceArbor</title>
    <link href="/collections/ancestralstates/aceArbor/"/>
    <updated>2017-01-04T00:00:00-08:00</updated>
    <id>/collections/ancestralstates/aceArbor</id>
    <author>
      <name>Luke Harmon</name>
      <uri>/</uri>
      <email>lukeh@uidaho.edu</email>
    </author>
    <content type="html">
      
      &lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;aceArbor is a function for carrying out ancestral state reconstruction. It works for
both discrete and continuous variables, and can reconstruct ancestral character states
under both a maximum-likelihood and a Bayesian framework. The function returns results
in two formats: a table of ancestral state estimates for each node in the tree, and a plot
of the results.&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;p&gt;From the &lt;a href=&quot;/documentation/datasets/&quot;&gt;docs&lt;/a&gt; page, get anolis.phy and anolis.csv.
Load these files into Arbor, and use them as inputs to the aceArbor function. Choose
the “ecomorph” column for analysis, and select type: discrete and method: marginal.&lt;/p&gt;

&lt;h2 id=&quot;arguments&quot;&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;table: A data table including species names&lt;/li&gt;
  &lt;li&gt;tree: A phylogenetic tree&lt;/li&gt;
  &lt;li&gt;column: The name of the column to analyze&lt;/li&gt;
  &lt;li&gt;type: The character type
    &lt;ul&gt;
      &lt;li&gt;discrete: a character with a discrete number of states&lt;/li&gt;
      &lt;li&gt;continuous: a continuously varying character&lt;/li&gt;
      &lt;li&gt;fromData: will attempt to determine the data type from the data itself&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;method: specifies the method used to reconstruct ancestral character states
    &lt;ul&gt;
      &lt;li&gt;marginal: marginal ancestral state reconstructions, which reconstruct each node integrating over all possibilities at all other nodes in the tree; this is typically the method used in the literature to reconstruce ACEs&lt;/li&gt;
      &lt;li&gt;joint: joint ancestral reconstructions, which give the configuration of ancestral states that together maximize the likelihood of the data given model parameters&lt;/li&gt;
      &lt;li&gt;mcmc: reconstruct ancestral states using Bayesian MCMC. Note that the discrete version of this doesn’t seem to work, and even if it did work it is not a full MCMC ancestral state method&lt;/li&gt;
      &lt;li&gt;stochastic: create stochastic character map&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;outputs&quot;&gt;Outputs&lt;/h2&gt;
&lt;p&gt;Function outputs a table and a plot with results of the ancestral state reconstruction.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

    </content>
  </entry>
  
  <entry>
    <title>Fitting models of trait evolution with Arbor</title>
    <link href="/tasks/trait-models/"/>
    <updated>2016-08-04T00:00:00-07:00</updated>
    <id>/tasks/trait-models</id>
    <author>
      <name>Luke Harmon</name>
      <uri>/</uri>
      <email>lukeh@uidaho.edu</email>
    </author>
    <content type="html">
      &lt;img src=&quot;/images/traitevol.jpg&quot;&gt;&lt;br/&gt;
      &lt;p&gt;We can fit a model of evolution - for example, Brownian motion or an Mk model - to comparative data, estimating model parameters and assessing model fit. For example, if we were interested in the evolution of body size among mammals (snakes and lizards), we could fit a variety of models. For each model, we could estimate the model parameters that best fit the data. We could also compare the fit of the models and use model selection to select the best of them.&lt;/p&gt;

&lt;p&gt;Fitting models of trait evolution requires:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a phylogenetic tree with branch lengths&lt;/li&gt;
  &lt;li&gt;data for the tips of the tree. In Arbor, you don’t have to have a perfect match between the species in the tree and in your data file - but anything that is missing from either of those will be dropped from the analysis.&lt;/li&gt;
  &lt;li&gt;a model of evolution&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;how-to-do-this-analysis-in-arbor&quot;&gt;How to do this analysis in Arbor&lt;/h2&gt;

&lt;p&gt;There are two functions to fit models of trait evolution in Arbor Workflows:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/collections/phylogeny/charactercalculate/fitContinuous/&quot;&gt;&lt;img src=&quot;/images/fitContinuous.png&quot; alt=&quot;fitContinuous fxn&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/collections/phylogeny/charactercalculate/fitContinuous/&quot;&gt;fitContinuous&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/collections/phylogeny/charactercalculate/fitDiscrete/&quot;&gt;&lt;img src=&quot;/images/fitDiscrete.png&quot; alt=&quot;fitDiscrete fxn&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/collections/phylogeny/charactercalculate/fitDiscrete/&quot;&gt;fitDiscrete&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;method-assumptions&quot;&gt;Method assumptions&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;known phylogenetic tree with branch lengths&lt;/li&gt;
  &lt;li&gt;specified model of evolution&lt;/li&gt;
  &lt;li&gt;tip character states known without error&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;example&quot;&gt;Example&lt;/h3&gt;

&lt;p&gt;From the &lt;a href=&quot;/documentation&quot;&gt;docs&lt;/a&gt; page, get anolis.phy and anolis.csv.
Load these files into Arbor, and use them as inputs to the fitDiscrete function (choose the “ecomorph” character).&lt;/p&gt;

&lt;h3 id=&quot;example-of-use-in-a-workflow&quot;&gt;Example of use in a workflow&lt;/h3&gt;

&lt;p&gt;TBA&lt;/p&gt;

&lt;h3 id=&quot;citations&quot;&gt;Citations&lt;/h3&gt;

&lt;p&gt;Harmon, L. J., J. B. Losos, J. Davies, R. G. Gillespie, J. L. Gittleman, W. B. Jennings, K. Kozak, M. A. McPeek, F. Moreno-Roark, T. J. Near, A. Purvis, R. E. Ricklefs, D. Schluter, J. A. Schulte II, O. Seehausen, B. Sidlauskas, O. Torres-Carvajal, J. T. Weir, &amp;amp; A. Ø. Mooers. 2010. Early bursts of body size and shape evolution are rare in comparative data. Evolution 64: 2385.&lt;/p&gt;

&lt;p&gt;Lewis, P.O. 2001. A likelihood approach to estimating phylogeny from discrete morphological character data. Systematic Biology 50:913-925.&lt;/p&gt;

&lt;p&gt;Pennell, M. W., J. M. Eastman, G. J. Slater, J. W. Brown, J. C. Uyeda, R. G. Fitzjohn, M. E. Alfaro, and L. J. Harmon. 2014. geiger v2.0: an expanded suite of methods for fitting macroevolutionary models to phylogenetic trees. Bioinformatics 30: 2216-2218.&lt;/p&gt;

    </content>
  </entry>
  
  <entry>
    <title>Ancestral character state estimation with Arbor</title>
    <link href="/tasks/ace/"/>
    <updated>2016-08-03T00:00:00-07:00</updated>
    <id>/tasks/ace</id>
    <author>
      <name>Luke Harmon</name>
      <uri>/</uri>
      <email>lukeh@uidaho.edu</email>
    </author>
    <content type="html">
      &lt;img src=&quot;/images/ace.jpg&quot;&gt;&lt;br/&gt;
      &lt;p&gt;Ancestral state estimate uses some model of evolution - for example, Brownian motion or an Mk model - and estimates ancestral character states for each node in a phylogenetic tree. For example, if we were interested in the evolution of limb presence or absence among squamates (snakes and lizards), we could use ancestral state estimation. We would use a tree and character data from living species to reconstruct character states (limbs or not) for each internal node in the tree.&lt;/p&gt;

&lt;p&gt;It can be difficult to estimate ancestral character states, so most methods return estimates along with some measure of uncertainty. For example, an ancestral state estimate for limbs in squamates might return an estimate with 80% of the marginal likelihood for a limbless state, and 20% for a limbed state - in other words, we think that this species did not have limbs but we are not sure based only on the tree, data, and model of evolution.&lt;/p&gt;

&lt;p&gt;Estimating ancestral character states requires three things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a phylogenetic tree with branch lengths&lt;/li&gt;
  &lt;li&gt;data for the tips of the tree. In Arbor, you don’t have to have a perfect match between the species in the tree and in your data file - but anything that is missing from either of those will be dropped from the analysis.&lt;/li&gt;
  &lt;li&gt;a model of evolution&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;how-to-do-this-analysis-in-arbor&quot;&gt;How to do this analysis in Arbor&lt;/h2&gt;

&lt;p&gt;Arbor provides several ways to estimate ancestral character states. The easiest option is to use the Arbor App &lt;a href=&quot;/arborapps/ancestral-state/&quot;&gt;Ancestral state estimation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can also estimate ancestral character states in Arbor Workflows using the aceArbor function.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/acearbor.png&quot; alt=&quot;aceArbor&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;more-details-acearbor-arbor-workflows-function&quot;&gt;More details: aceArbor (Arbor Workflows function)&lt;/h2&gt;

&lt;p&gt;aceArbor is a function for carrying out ancestral state reconstruction. It works for
both discrete and continuous variables, and can reconstruct ancestral character states
under both a maximum-likelihood and a Bayesian framework. The function returns results
in two formats: a table of ancestral state estimates for each node in the tree, and a plot
of the results.&lt;/p&gt;

&lt;h3 id=&quot;acearbor-assumptions&quot;&gt;aceArbor assumptions&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;known phylogenetic tree with branch lengths&lt;/li&gt;
  &lt;li&gt;specified model of evolution (see below)&lt;/li&gt;
  &lt;li&gt;tip character states known without error&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;acearbor-inputs&quot;&gt;aceArbor inputs&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;table: A data table including species names&lt;/li&gt;
  &lt;li&gt;tree: A phylogenetic tree&lt;/li&gt;
  &lt;li&gt;column: The name of the column to analyze&lt;/li&gt;
  &lt;li&gt;type: The character type
    &lt;ul&gt;
      &lt;li&gt;discrete: a character with a discrete number of states&lt;/li&gt;
      &lt;li&gt;continuous: a continuously varying character&lt;/li&gt;
      &lt;li&gt;fromData: will attempt to determine the data type from the data itself&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;method: specifies the method used to reconstruct ancestral character states
    &lt;ul&gt;
      &lt;li&gt;marginal: marginal ancestral state reconstructions, which reconstruct each node integrating over all possibilities at all other nodes in the tree; this is typically the method used in the literature to reconstruce ACEs&lt;/li&gt;
      &lt;li&gt;joint: joint ancestral reconstructions, which give the configuration of ancestral states that together maximize the likelihood of the data given model parameters&lt;/li&gt;
      &lt;li&gt;mcmc: reconstruct ancestral states using Bayesian MCMC. Note that the discrete version of this doesn’t seem to work, and even if it did work it is not a full MCMC ancestral state method&lt;/li&gt;
      &lt;li&gt;stochastic: create stochastic character map&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;acearbor-outputs&quot;&gt;aceArbor outputs&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;a table and a plot with results of the ancestral state reconstruction.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;acearbor-example&quot;&gt;aceArbor example&lt;/h3&gt;

&lt;p&gt;From the &lt;a href=&quot;/documentation&quot;&gt;docs&lt;/a&gt; page, get anolis.phy and anolis.csv.
Load these files into Arbor, and use them as inputs to the aceArbor function. Choose
the “ecomorph” column for analysis, and select type: discrete and method: marginal.&lt;/p&gt;

&lt;p&gt;Your results should look like this.&lt;/p&gt;

&lt;p&gt;Table: A table showing the internal nodes of the tree (numbered following ape’s scheme) along with marginal likelihoods for each character state.
&lt;img src=&quot;/images/acearbor-exampletable.png&quot; alt=&quot;acearbor-plot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Plot: A plot of the tree with ancestral state estimates at every node.
&lt;img src=&quot;/images/acearbor-exampleplot.png&quot; alt=&quot;acearbor-plot&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;acearbor-example-of-use-in-a-workflow&quot;&gt;aceArbor example of use in a workflow&lt;/h3&gt;

&lt;p&gt;You can see a tutorial for constructing a workflow that involves aceArbor
&lt;a href=&quot;/tutorials/reconstructing-ancestral-characters-discrete&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;acearbor-citations&quot;&gt;aceArbor citations&lt;/h3&gt;

&lt;p&gt;Lewis, P.O. 2001. A likelihood approach to estimating phylogeny from discrete morphological character data. Systematic Biology 50:913-925.&lt;/p&gt;

&lt;p&gt;Pagel, M. 1999. The maximum likelihood approach to reconstructing ancestral character states of discrete characters on phylogenies. Systematic Biology. 48: 612-622.&lt;/p&gt;

&lt;p&gt;Schluter, D., T. Price, A. O. Mooers, and D. Ludwig. 1997. Likelihood of ancestor states in adaptive radiation. Evolution 51: 1699.&lt;/p&gt;

    </content>
  </entry>
  
  <entry>
    <title>Timetrees</title>
    <link href="/tutorials/timetrees/"/>
    <updated>2016-04-18T00:00:00-07:00</updated>
    <id>/tutorials/timetrees</id>
    <author>
      <name>Luke Harmon</name>
      <uri>/</uri>
      <email>lukeh@uidaho.edu</email>
    </author>
    <content type="html">
      
      &lt;h2 id=&quot;creating-timetrees&quot;&gt;Creating timetrees&lt;/h2&gt;

&lt;p&gt;Arbor has a few tools to create time-scaled phylogenetic trees. You can rescale your tree using standard methods like &lt;a href=&quot;&quot;&gt;pathd8&lt;/a&gt;, &lt;a href=&quot;&quot;&gt;penalized likelihood&lt;/a&gt;, or other methods that have been implemented in R. Alternatively, you can use our new tree rescaling method, described below, that calibrates a tree using dates from &lt;a href=&quot;http://timetree.org&quot;&gt;timetree&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;using-arbor-to-rescale-your-tree&quot;&gt;Using Arbor to rescale your tree&lt;/h2&gt;

&lt;p&gt;In this example, we will obtain a tree from &lt;a href=&quot;http://opentree.org&quot;&gt;open tree of life&lt;/a&gt; and rescale it using dates from &lt;a href=&quot;http://timetree.org&quot;&gt;timetree of life&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We start with a list of taxa, &lt;a href=&quot;/assets/testTaxa.csv&quot;&gt;testTaxa.csv&lt;/a&gt;. You can upload that csv file to your arbor instance, or just find it stored in the “treeTimer” collection.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/timetree/timetree-screen1.png&quot; alt=&quot;screen1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, choose and run the function called “Match taxa to the timetree of life” from the treeTimer collection.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/timetree/timetree-screen2.png&quot; alt=&quot;screen2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Use the following settings for this function:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/timetree/timetree-screen3.png&quot; alt=&quot;screen3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When the function has stopped running, you should see a success message:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/timetree/timetree-screen4.png&quot; alt=&quot;screen4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can see a plot of the output by choosing the right settings in the Visualization tab.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/timetree/timetree-screen5.png&quot; alt=&quot;screen5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is your timetree:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/timetree/timetree-output.png&quot; alt=&quot;screen6&quot; /&gt;&lt;/p&gt;

    </content>
  </entry>
  
  <entry>
    <title>Megaphylogenies</title>
    <link href="/tutorials/megatrees/"/>
    <updated>2016-04-18T00:00:00-07:00</updated>
    <id>/tutorials/megatrees</id>
    <author>
      <name>Luke Harmon</name>
      <uri>/</uri>
      <email>lukeh@uidaho.edu</email>
    </author>
    <content type="html">
      
      &lt;h2 id=&quot;what-is-a-megaphylogeny&quot;&gt;What is a megaphylogeny?&lt;/h2&gt;

&lt;p&gt;Megaphylogenies are very large phylogenetic trees with thousands of tips.&lt;/p&gt;

&lt;h2 id=&quot;how-can-arbor-help-with-my-megaphylogenetic-analysis&quot;&gt;How can Arbor help with my megaphylogenetic analysis?&lt;/h2&gt;

&lt;p&gt;Arbor can help in three ways. First, using web services, Arbor can help you obtain large trees and time-scale these trees when necessary. Second, Arbor can help you match phylogenetic and character data, a complex task with very large trees. Finally, Arbor can analyze large datasets quickly and efficiently.&lt;/p&gt;

&lt;h1 id=&quot;obtaining-and-time-scaling-large-trees&quot;&gt;Obtaining and time-scaling large trees&lt;/h1&gt;

&lt;p&gt;You can use Arbor’s &lt;a href=&quot;/tutorials/webservices/&quot;&gt;web services&lt;/a&gt; to obtain large phylogenetic trees from &lt;a href=&quot;http://www.opentreeoflife.org/&quot;&gt;Open Tree of Life&lt;/a&gt;. You can then use Arbor’s &lt;a href=&quot;/tutorials/timetrees/&quot;&gt;method for time-scaling trees&lt;/a&gt; to add branch lengths to this tree.&lt;/p&gt;

&lt;h1 id=&quot;matching-phylogenetic-and-character-data&quot;&gt;Matching phylogenetic and character data&lt;/h1&gt;

&lt;p&gt;Our new &lt;a href=&quot;https://github.com/uyedaj/treeplyr&quot;&gt;treeplyr&lt;/a&gt; package is made to help match tree and character data, and manipulate the combined dataset. Try the &lt;a href=&quot;https://github.com/uyedaj/treeplyr/wiki&quot;&gt;treeplyr tutorial&lt;/a&gt;.&lt;/p&gt;

    </content>
  </entry>
  
  <entry>
    <title>testTaxa.csv</title>
    <link href="/collections/timetree/data/testTaxa-csv/"/>
    <updated>2016-04-18T00:00:00-07:00</updated>
    <id>/collections/timetree/data/testTaxa-csv</id>
    <author>
      <name>Luke Harmon</name>
      <uri>/</uri>
      <email>lukeh@uidaho.edu</email>
    </author>
    <content type="html">
      
      &lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;List of species that can be used to query both open tree of life and timetree.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

    </content>
  </entry>
  
  <entry>
    <title>phelsuma.phy</title>
    <link href="/collections/phylogeny/data/phelsuma-phy/"/>
    <updated>2016-04-18T00:00:00-07:00</updated>
    <id>/collections/phylogeny/data/phelsuma-phy</id>
    <author>
      <name>Luke Harmon</name>
      <uri>/</uri>
      <email>lukeh@uidaho.edu</email>
    </author>
    <content type="html">
      
      &lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Phylogenetic tree of Phelsuma lizards.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

    </content>
  </entry>
  
  <entry>
    <title>phelsuma.csv</title>
    <link href="/collections/phylogeny/data/phelsuma-csv/"/>
    <updated>2016-04-18T00:00:00-07:00</updated>
    <id>/collections/phylogeny/data/phelsuma-csv</id>
    <author>
      <name>Luke Harmon</name>
      <uri>/</uri>
      <email>lukeh@uidaho.edu</email>
    </author>
    <content type="html">
      
      &lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Character data for Phelsuma lizards.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

    </content>
  </entry>
  
  <entry>
    <title>anolis.phy</title>
    <link href="/collections/phylogeny/data/anolis-phy/"/>
    <updated>2016-04-18T00:00:00-07:00</updated>
    <id>/collections/phylogeny/data/anolis-phy</id>
    <author>
      <name>Luke Harmon</name>
      <uri>/</uri>
      <email>lukeh@uidaho.edu</email>
    </author>
    <content type="html">
      
      &lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Phylogenetic tree of anolis lizards.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

    </content>
  </entry>
  
  <entry>
    <title>mammal_species_list.csv</title>
    <link href="/collections/opentree/data/mammal-species-list-csv/"/>
    <updated>2016-04-18T00:00:00-07:00</updated>
    <id>/collections/opentree/data/mammal-species-list-csv</id>
    <author>
      <name>Luke Harmon</name>
      <uri>/</uri>
      <email>lukeh@uidaho.edu</email>
    </author>
    <content type="html">
      
      &lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;A list of mammal species for the example on pulling from Open Tree of Life&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

    </content>
  </entry>
  
  <entry>
    <title>anolis.csv</title>
    <link href="/collections/base/phylogeny/data/anolis-csv/"/>
    <updated>2016-04-18T00:00:00-07:00</updated>
    <id>/collections/base/phylogeny/data/anolis-csv</id>
    <author>
      <name>Luke Harmon</name>
      <uri>/</uri>
      <email>lukeh@uidaho.edu</email>
    </author>
    <content type="html">
      
      &lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Data on anolis lizards.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

    </content>
  </entry>
  
  <entry>
    <title>Web services 1</title>
    <link href="/tutorials/webservices/"/>
    <updated>2016-03-11T00:00:00-08:00</updated>
    <id>/tutorials/webservices</id>
    <author>
      <name>Luke Harmon</name>
      <uri>/</uri>
      <email>lukeh@uidaho.edu</email>
    </author>
    <content type="html">
      
      &lt;h2 id=&quot;what-are-web-services&quot;&gt;What are web services?&lt;/h2&gt;

&lt;p&gt;Web services are protocols for computers to exchange information over the web (see &lt;a href=&quot;https://en.wikipedia.org/wiki/Web_service&quot;&gt;wikipedia: web service&lt;/a&gt;), typically via an &lt;a href=&quot;https://en.wikipedia.org/wiki/Application_programming_interface&quot;&gt;API&lt;/a&gt;. In biology, web services are becoming more and more common. You can obtain, for example, phylogenetic trees from &lt;a href=&quot;http://opentreeoflife.org/&quot;&gt;Open Tree of Life&lt;/a&gt;, geographic occurrences from &lt;a href=&quot;http://www.gbif.org/&quot;&gt;GBIF&lt;/a&gt;, and trait data from &lt;a href=&quot;http://eol.org/&quot;&gt;Encyclopedia of Life&lt;/a&gt;, all using web services.&lt;/p&gt;

&lt;p&gt;We have a number of pre-made functions in Arbor that can obtain data through web services. These functions can be included in workflows that make it easy to combine your data with data obtained over the web and carry out analyses. In this tutorial we will illustrate one of these applications, starting with a list of species and obtaining a phylogenetic tree from Open Tree of Life.&lt;/p&gt;

&lt;h2 id=&quot;example-from-a-list-of-species-to-a-phylogenetic-tree&quot;&gt;Example: from a list of species to a phylogenetic tree&lt;/h2&gt;

&lt;p&gt;We are going to start with a list of species. You can obtain this list as a csv file &lt;a href=&quot;/assets/mammal_species_list.csv&quot;&gt;here&lt;/a&gt;; download and save this file somewhere to your computer.&lt;/p&gt;

&lt;p&gt;Now, open an Arbor instance (e.g. &lt;a href=&quot;http://arborclassic.arborworkflows.com:9080/#&quot;&gt;arborclassic.arborworkflows.com:9080&lt;/a&gt;). You will now need to load in your species list. You can do this by dragging the file that you just downloaded onto the “Browse or drop files” box:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/webServices/webserv-screen1.png&quot; alt=&quot;screen1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(you can also see our tutorial on &lt;a href=&quot;/tutorials/using-the-arbor-webapp/&quot;&gt;using the Arbor webapp&lt;/a&gt;) for more information on loading data into Arbor)&lt;/p&gt;

&lt;p&gt;We will be building a workflow to do this analysis. Note that you need to be logged in and have write access to a collection to make the next parts work!&lt;/p&gt;

&lt;p&gt;Click over to the “Analysis” tab, and create a new workflow. To do that, type the name of the new workflow it the box under “Create new analysis.” Let’s call our workflow “getOTLTreeAndPlot.”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/webServices/webserv-screen2.png&quot; alt=&quot;screen2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you have created the workflow, you should be able to view and edit (but right now it is just a blank white space!)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/webServices/webserv-screen3.png&quot; alt=&quot;screen3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first step in this workflow is to match the species names with the names in the Open Tree of Life Taxonomy (OTT). To do this, we will use a function in the “OpenTree” collection called “Lookup Names Using OpenTree Taxonomy.” Add this function to your workflow using the “+ add to workflow” button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/webServices/webserv-screen4.png&quot; alt=&quot;screen4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can click the tab on the left side of that new workflow step to indicate that the user will send a data table directly to this function. So our workflow is now:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/webServices/webserv-screen5.png&quot; alt=&quot;screen5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we need to pull out an “induced subtree” from open tree of life using the OTT ids that we obtained in the previous step. To do that, add a new function to your workflow, again from the OpenTree collection: “Return the Open Tree Subtree from a node list.” Add and connect that next step to your workflow:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/webServices/webserv-screen6.png&quot; alt=&quot;screen6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we just need to plot our resulting tree. You can use a function from the “Phylogenies” collection called “PlotTreeWithApe.” Add that function, connect it to your workflow, and specify that the last output be sent to the user:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/webServices/webserv-screen7.png&quot; alt=&quot;screen7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now just click “Setup and run.” In the box that appears, choose your input file with the list of mammal species names.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/webServices/webserv-screen8.png&quot; alt=&quot;screen8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The workflow will run for a while:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/webServices/webserv-screen9.png&quot; alt=&quot;screen9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And then finish:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/webServices/webserv-screen10.png&quot; alt=&quot;screen10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can then change to the “visualization” tab, and select the output from your workflow.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/webServices/webserv-screen11.png&quot; alt=&quot;screen11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We then see the final result:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/webServices/webserv-screen12.png&quot; alt=&quot;screen12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is a phylogenetic tree pulled from the Open Tree of Life synthesis that includes all of the species in the table that you supplied.&lt;/p&gt;

    </content>
  </entry>
  
  
</feed>